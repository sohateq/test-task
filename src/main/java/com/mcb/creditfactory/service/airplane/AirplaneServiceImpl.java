package com.mcb.creditfactory.service.airplane;

import com.mcb.creditfactory.dto.AirplaneDto;
import com.mcb.creditfactory.external.ExternalApproveService;
import com.mcb.creditfactory.model.Airplane;
import com.mcb.creditfactory.model.AirplaneAssessment;
import com.mcb.creditfactory.repository.AirplaneAssessmentRepository;
import com.mcb.creditfactory.repository.AirplaneRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.util.Pair;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class AirplaneServiceImpl implements AirplaneService {
    @Autowired
    private ExternalApproveService approveService;

    @Autowired
    private AirplaneRepository airplaneRepository;

    @Autowired
    private AirplaneAssessmentRepository airplaneAssessmentRepository;

    @Override
    public boolean approve(AirplaneDto dto) {
        return approveService.approve(new AirplaneAdapter(dto)) == 0;
    }

    @Override
    public Airplane save(Airplane airplane) {
        return airplaneRepository.save(airplane);
    }

    @Override
    public Boolean saveAssessment(AirplaneDto airplane, Long savedAirplaneId) {
        Boolean isSaved = true;

        AirplaneAssessment assessment = new AirplaneAssessment();
        assessment.setId(0L); //autogenerated
        assessment.setIdAirplane(savedAirplaneId);

        for (Pair<BigDecimal, LocalDate> pair : airplane.getAssessments()) {
            assessment.setValue(pair.getFirst());
            assessment.setDate(pair.getSecond());

            if (airplaneAssessmentRepository.save(assessment).getId() == null) isSaved = false;
        }

        return isSaved;
    }

    @Override
    public Optional<Airplane> load(Long id) {
        return airplaneRepository.findById(id);
    }

    @Override
    public Airplane fromDto(AirplaneDto dto) {
        return new Airplane(
                dto.getId(),
                dto.getBrand(),
                dto.getModel(),
                dto.getManufacturer(),
                dto.getYear(),
                dto.getFuelCapacity(),
                dto.getSeats()
        );
    }

    @Override
    public AirplaneDto toDTO(Airplane airplane) {
        //get assessment list from repository
        List<Pair<BigDecimal, LocalDate>> pairList =
                airplaneAssessmentRepository.findAllByIdAirplane(airplane.getId())
                        .stream()
                        .map(AirplaneAssessment::getPair)
                        .collect(Collectors.toList());

        return new AirplaneDto(
                airplane.getId(),
                airplane.getBrand(),
                airplane.getModel(),
                airplane.getManufacturer(),
                airplane.getYear(),
                airplane.getFuelCapacity(),
                airplane.getSeats(),
                pairList
        );
    }

    @Override
    public Long getId(Airplane airplane) {
        return airplane.getId();
    }

    @Override
    public boolean existById(Long id) {
        return airplaneRepository.existsById(id);
    }
}
